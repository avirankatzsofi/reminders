// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateReminder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createReminder(data: ReminderCreateInput!): Reminder!
  updateReminder(data: ReminderUpdateInput!, where: ReminderWhereUniqueInput!): Reminder
  updateManyReminders(data: ReminderUpdateManyMutationInput!, where: ReminderWhereInput): BatchPayload!
  upsertReminder(where: ReminderWhereUniqueInput!, create: ReminderCreateInput!, update: ReminderUpdateInput!): Reminder!
  deleteReminder(where: ReminderWhereUniqueInput!): Reminder
  deleteManyReminders(where: ReminderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  reminder(where: ReminderWhereUniqueInput!): Reminder
  reminders(where: ReminderWhereInput, orderBy: ReminderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reminder]!
  remindersConnection(where: ReminderWhereInput, orderBy: ReminderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReminderConnection!
  node(id: ID!): Node
}

type Reminder {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReminderConnection {
  pageInfo: PageInfo!
  edges: [ReminderEdge]!
  aggregate: AggregateReminder!
}

input ReminderCreateInput {
  id: ID
  content: String!
}

type ReminderEdge {
  node: Reminder!
  cursor: String!
}

enum ReminderOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReminderPreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReminderSubscriptionPayload {
  mutation: MutationType!
  node: Reminder
  updatedFields: [String!]
  previousValues: ReminderPreviousValues
}

input ReminderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReminderWhereInput
  AND: [ReminderSubscriptionWhereInput!]
  OR: [ReminderSubscriptionWhereInput!]
  NOT: [ReminderSubscriptionWhereInput!]
}

input ReminderUpdateInput {
  content: String
}

input ReminderUpdateManyMutationInput {
  content: String
}

input ReminderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReminderWhereInput!]
  OR: [ReminderWhereInput!]
  NOT: [ReminderWhereInput!]
}

input ReminderWhereUniqueInput {
  id: ID
}

type Subscription {
  reminder(where: ReminderSubscriptionWhereInput): ReminderSubscriptionPayload
}
`